install.packages("tidyverse")
install.packages("jsonlite")
setwd("C:/Users/simaa/Class/R_Analysis")
setwd("C:/Users/simaa/Class/R_Analysis/01_Demo")
x <- 3
x <- 4
numlist <- c(1,2,3,4,8)
numlist <- c(1, 2, 3, 4, 8)
wordlist <- (sima, amir, soli)
wordlist <- ("sima", "amir", "soli")
wordlist <- ("sima" "amir" "soli")
wordlist <- ("sima","amir","soli")
wordlist <- ("sima", "amir", "soli")
wordlist <- c("sima", "amir", "soli")
v <- c(sima, 5, TRUE)
v <- c("sima", 5, TRUE)
print(add.result)
v1 <- (1,2,3,5)
V2 <- c(1,2,3,4)
print(add.result)
print(add.result)
print(x)
y <- v1+v2
v1 <- c(1,2,3,5)
V2 <- c(1,2,3,4)
y <- v1+v2
V2 <- c(1,2,3,4)
y <- v1+v2
v1 <- c(1,2,3,5)
V2 <- c(1,2,3,4)
y <- v1+v2
print(y)
y <- v1+v2
print(y)
x <- 3
x <- 4
numlist <- c(1, 2, 3, 4, 8)
y<- x
x <- 3
y<- x
x <- 8
y<- x
v1 <- c(1,2,3,5)
V2 <- c(1,2,3,4)
y <- v1+v2
v2 <- c(1,2,3,4)
y <- v1+v2
v2 <- c(1,2,3,4, 8)
y <- v1+v2
print(y)
v2 <- c(1,2,3,4,10)
y <- v1+v2
print(y)
v1 <- c(1,2,3,5,0)
v2 <- c(1,2,3,4,10)
y <- v1+v2
v1 <- c(1,2,3,5,)
v1 <- c(1,2,3,5)
v2 <- c(1,2,3,4,10)
y <- v1/v2
v2 <- c(1,2,3,4,10,9)
y <- v1/v2
print(y)
v1 <- c(1,2,3,5)
v2 <- c(1,2,3,4,10,9)
?read.csv()
?read.csv()
demo_table <- read.csv(file='demo.csv',check.names=F,stringsAsFactors = F)
View(demo_table)
View(demo_table)
View(demo_table)
View(demo_table)
library(jsonlite)
library(jsonlite)
library(jsonlite)
read.csv()
?fromJSON()
demo_table2 <- fromJSON(txt='demo.json')
View(demo_table)
View(demo_table2)
demo_table2$price > 10000
filter_table <- demo_table2[demo_table2$price > 10000,]
View(filter_table)
filter_table <- demo_table2[demo_table2$price > 10000,price]
filter_table <- demo_table2[demo_table2$price > 10000,"price"]
View(demo_table)
filter_table <- demo_table2[demo_table2$price > 10000,"price"]
filter_table <- demo_table2[demo_table2$price > 10000,2]
filter_table <- demo_table2[demo_table2$price > 10000,2,3]
filter_table <- demo_table2[demo_table2$price > 10000,2,3]
filter_table <- demo_table2[demo_table2$price > 10000,2,3,4]
filter_table <- demo_table2[demo_table2$price > 10000,2,3,]
filter_table <- demo_table2[demo_table2$price > 10000,2,]
filter_table <- demo_table2[demo_table2$price > 10000,]
View(filter_table)
filter_table <- demo_table2[demo_table2$price > 10000,2]
filter_table <- demo_table2[demo_table2$price > 10000,3]
filter_table <- demo_table2[demo_table2$price > 10000,]
filter_table <- demo_table2[demo_table2$price > 10000,]["price"]
filter_table <- demo_table2[demo_table2$price > 10000,]["price","city"]
filter_table <- demo_table2[demo_table2$price > 10000,]["price"]["city"]
filter_table <- demo_table2[demo_table2$price > 10000,]["price"],["city"]
filter_table <- demo_table2[demo_table2$price > 10000,]["price"]
filter_table <- demo_table2[demo_table2$price > 10000,]["price","city"]
filter_table <- demo_table2[demo_table2$price > 10000,]["price"]
> filter_table2 <- subset(demo_table2, price > 10000 & drive == "4wd" & "clean" %in% title_status) #filter by price and drivetrain
> filter_table2 <- subset(demo_table2, price > 10000 & drive == "4wd" & "clean"
%in% title_status) #filter by price and drivetrain
filter_table2 <- subset(demo_table2, price > 10000 & drive == "4wd" & "clean" %in% title_status) #filter by price and drivetrain
View(demo_table)
View(demo_table2)
filter_table2 <- subset(demo_table2, price > 10000 & drive == "4wd" & "clean" %in% title_status) #filter by price and drivetrain
View(filter_table2)
filter_table3 <- demo_table2[("clean" %in% demo_table2$title_status) & (demo_table2$price > 10000) & (demo_table2$drive == "4wd"),]["pric"]
filter_table3 <- demo_table2[("clean" %in% demo_table2$title_status) & (demo_table2$price > 10000) & (demo_table2$drive == "4wd"),]["price"]
View(filter_table3)
filter_table3 <- demo_table2[("clean" %in% demo_table2$title_status) & (demo_table2$price > 10000) & (demo_table2$drive == "4wd"),]
sample(c("cow", "deer", "pig", "chicken", "duck", "sheep", "dog"), 4)
sample(c("cow", "deer", "pig", "chicken", "duck", "sheep", "dog"), 4)
num_rows <- 1:nrow(demo_table)
View(demo_table)
sample_rows <- sample(num_rows, 3)
demo_table[sample_rows,]
demo_table[sample_rows,]
View(demo_table)
sample_rows <- sample(num_rows, 4)
demo_table[sample_rows,]
sample_rows <- sample(num_rows, 2)
demo_table[sample_rows,]
demo_table[sample(1:nrow(demo_table), 3),]
3
library(tidyverse)
?mutate()
demo_table <- demo_table %>% mutate(Mileage_per_Year=Total_Miles/(2020-Year),IsActive=TRUE) #add columns to original data frame
View(demo_table)
View(demo_table)
View(demo_table2)
View(filter_table)
View(filter_table2)
View(filter_table3)
ummarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer), .groups = 'keep') #create summary table
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer), .groups = 'keep') #create summary table
View(summarize_demo)
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer)) #create summary table
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer),Maximum_Price=max(price),Num_Vehicles=n(), .groups = 'keep') #create summary table with multiple columns
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer),Maximum_Price=max(price),Num_Vehicles=n(), .groups = 'drop') #create summary table with multiple columns
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer),Maximum_Price=max(price),Num_Vehicles=n(), .groups = 'keep') #create summary table with multiple columns
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer),Maximum_Price=max(price),Num_Vehicles=n(), .groups = 'drop') #create summary table with multiple columns
View(summarize_demo)
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer),Maximum_Price=max(price),Num_Vehicles=n(), .groups = 'keep') #create summary table with multiple columns
demo_table3 <- read.csv('demo2.csv',check.names = F,stringsAsFactors = F)
View(demo_table3)
?read.csv()
long_table <- gather(demo_table3,key="Metric",value="Score",buying_price:popularity)
View(long_table)
long_table <- demo_table3 %>% gather(key="Metric",value="Score",buying_price:popularity)
long_table <- demo_table3 %>% gather(key="Metric",value="Score",buying_price:safety_rating)
long_table <- demo_table3 %>% gather(key="Metric",value="Score",buying_price:popularity)
long_table <- demo_table3 %>% gather(key="Metric",value="Score",)
long_table <- demo_table3 %>% gather(key="Metric",value="Score",buying_price:popularity)
long_table <- demo_table3 %>% gather(key="Metric",value="Score",buying_price:saftey_rating)
long_table <- demo_table3 %>% gather(key="Metric",value="Score",buying_price:safety_rating)
wide_table <- long_table %>% spread(key="Metric",value="Score")
View(wide_table)
all.equal(demo_table3,wide_table)
all.equal(demo_table3,wide_table)
head(mpg)
plt <- ggplot(mpg,aes(x=class)) #import dataset into ggplot2
plt <- ggplot(mpg,aes(x=class)) #import dataset into ggplot2
plt + geom_bar() #plot a bar plot
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), .groups = 'keep') #create summary table
ggplot(mpg_summary,aes(x=manufacturer,y=Vehicle_Count)) #import dataset into ggplot2
plt + geom_col() #plot a bar plot
ggplot(mpg_summary,aes(x=manufacturer,y=Vehicle_Count)) #import dataset into ggplot2
ggplot(mpg_summary,aes(x=manufacturer,y=Vehicle_Count)) #import dataset into ggplot2
plt + geom_col() #plot a bar plot
plt + geom_col() #plot a bar plot
plt + geom_col(y) #plot a bar plot
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=manufacturer,y=Vehicle_Count)) #import dataset into ggplot2
plt + geom_col() #plot a bar plot
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset")#plot a bar plot
theme(axis.text.x=element_text(angle=45,hjust=1)) #rotate the x-axis label 45 degrees
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") + theme(axis.text.x=element_text(angle=45,hjust=1)) #plot a bar plot
mpg_summary <- subset(mpg,manufacturer=="toyota") %>% group_by(cyl) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=cyl,y=Mean_Hwy)) #import dataset into ggplot2
theme(axis.text.x=element_text(angle=45,hjust=1)) #rotate the x-axis label 45 degrees
mpg_summary <- subset(mpg,manufacturer=="toyota") %>% group_by(cyl) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=cyl,y=Mean_Hwy)) #import dataset into ggplot2
View(mpg_summary)
plt + geom_line()
plt + geom_line() + scale_x_discrete(limits=c(4,6,8)) + scale_y_continuous(breaks = c(15:30)) #add line plot with labels
plt <- ggplot(mpg,aes(x=displ,y=cty)) #import dataset into ggplot2
plt + geom_point() + xlab("Engine Size (L)") + ylab("City Fuel-Efficiency (MPG)") #add scatter plot with labels
plt + geom_point() + xlab("Engine Size (L)") + ylab("City Fuel-Efficiency (MPG)", color="Vehicle Class") #add scatter plot with labels
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class)) #import dataset into ggplot2
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class") #add scatter plot with labels
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class,shape=drv)) #import dataset into ggplot2
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class",shape="Type of Drive") #add scatter plot with multiple aesthetics
plt <- ggplot(mpg,aes(y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() #add boxplot
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1)) #add boxplot and rotate x-axis labels 45 degrees
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1)) #add boxplot and rotate x-axis labels 45 degrees
mpg_summary <- mpg %>% group_by(class,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=class,y=factor(year),fill=Mean_Hwy))
plt + geom_tile() + labs(x="Vehicle Class",y="Vehicle Year",fill="Mean Highway (MPG)") #create heatmap with labels
mpg_summary <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=model,y=factor(year),fill=Mean_Hwy)) #import dataset into ggplot2
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") + #add heatmap with labels > theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5)) #rotate x-axis labels 90 degrees
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") + #add heatmap with labels > theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5)) #rotate x-axis labels 90 degrees
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") + theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5)) #rotate x-axis labels 90 degrees
> mpg_summary <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
mpg_summary <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=model,y=factor(year),fill=Mean_Hwy)) #import dataset into ggplot2
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") + #add heatmap with labels > theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5)) #rotate x-axis labels 90 degrees
mpg_summary <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
mpg_summary <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=model,y=factor(year),fill=Mean_Hwy)) #import dataset into ggplot2
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") + #add heatmap with labels > theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5)) #rotate x-axis labels 90 degrees
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") + #add heatmap with labels > theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5)) #rotate x-axis labels 90 degrees
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") + #add heatmap with labels > theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5)) #rotate x-axis labels 90 degrees
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") + #add heatmap with labels > theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5)) #rotate x-axis labels 90 degrees
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") + theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5)) #rotate x-axis labels 90 degrees
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() + #add boxplot
theme(axis.text.x=element_text(angle=45,hjust=1)) + #rotate x-axis labels 45 degrees
geom_point() #overlay scatter plot on top
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type)) #import dataset into ggplot2
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1)) #add boxplot with labels rotated 45 degrees
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type)) #import dataset into ggplot2
plt + geom_boxplot() + facet_wrap(vars(MPG_Type)) + #create multiple boxplots, one for each MPG type
theme(axis.text.x=element_text(angle=45,hjust=1),legend.position = "none") + xlab("Manufacturer") #rotate x-axis labels
plt + geom_boxplot() + facet_wrap(vars(MPG_Type)) + theme(axis.text.x=element_text(angle=45,hjust=1),legend.position = "none") + xlab("Manufacturer") #rotate x-axis labels
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type)) #import dataset into ggplot2
plt + geom_boxplot() + facet_wrap(vars(MPG_Type)) + #create multiple boxplots, one for each MPG type
>theme(axis.text.x=element_text(angle=45,hjust=1),legend.position = "none") + xlab("Manufacturer") #rotate x-axis labels
plt + geom_boxplot() + facet_wrap(vars(MPG_Type)) + #create multiple boxplots, one for each MPG type
theme(axis.text.x=element_text(angle=45,hjust=1),legend.position = "none") + xlab("Manufacturer") #rotate x-axis labels
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type)) #import dataset into ggplot2
mpg_long <- mpg %>% gather(key="MPG_Type",value="Rating",c(cty,hwy)) #convert to long format
head(mpg_long)
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type)) #import dataset into ggplot2
plt + geom_boxplot() + facet_wrap(vars(MPG_Type)) + #create multiple boxplots, one for each MPG type
theme(axis.text.x=element_text(angle=45,hjust=1),legend.position = "none") + xlab("Manufacturer") #rotate x-axis labels
ggplot(mtcars,aes(x=wt)) + geom_density() #visualize distribution using density plot
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F) #import used car dataset
plt <- ggplot(population_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
sample_table <- population_table %>% sample_n(50) #randomly sample 50 data points
plt <- ggplot(sample_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
?t.test()
library(dplyr)
setwd("C:/Users/simaa/Class/R_Analysis/MechaCar_Statistical_Analysis")
setwd("C:/Users/simaa/Class/R_Analysis/MechaCar_Statistical_Analysis")
mechacar_df <- read.csv(file='MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
View(mechacar_df)
lm(qsec ~ mpg + disp + drat + wt + hp,data=mechacar_df) #generate multiple linear regression model
lm(vehicle_length ~ vehicle_weight + spoiler_angle + ground_clearance + AWD + mpg ,data=mechacar_df) #generate multiple linear regression model
>summary(lm(vehicle_length ~ vehicle_weight + spoiler_angle  + ground_clearance + AWD + mpg ,data=mtcars)) #generate summary statistics
summary(lm(vehicle_length ~ vehicle_weight + spoiler_angle  + ground_clearance + AWD + mpg ,data=mtcars)) #generate summary statistics
lm(vehicle_length ~ vehicle_weight + spoiler_angle + ground_clearance + AWD + mpg ,data=mechacar_df) #generate multiple linear regression model
lm(mgp ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mechacar_df) #generate multiple linear regression model
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mechacar_df) #generate multiple linear regression model
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle  + ground_clearance + AWD,data=mtcars)) #generate summary statistics
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle  + ground_clearance + AWD,data=mtcars)) #generate summary statistics
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle  + ground_clearance + AWD,data=mechacar_df)) #generate summary statistics
Suspension <- read.csv(file='Suspension_coil.csv',check.names=F,stringsAsFactors = F)
total_summary <- Suspension %>% summarize(Mean=mean(PSI),Median=(PSI),Variance=var(PSI),SD=sd(PSI))
View(total_summary)
Suspension_df <- read.csv(file='Suspension_coil.csv',check.names=F,stringsAsFactors = F)
total_summary <- Suspension_df %>% summarize(Mean=mean(PSI),Median=(PSI),Variance=var(PSI),SD=sd(PSI))
View(Suspension_df)
View(total_summary)
total_summary <- Suspension_df %>% summarize(Mean=mean(PSI),Median=(PSI),Variance=var(PSI),SD=sd(PSI))
total_summary =  summarize(Suspension_df, Mean=mean(PSI),Median=(PSI),Variance=var(PSI),SD=sd(PSI))
total_summary =  summarize(Suspension_df, Mean=mean(PSI),Median=(PSI),Variance=var(PSI),SD=sd(PSI))
total_summary =  summarize(Suspension_df, Mean=mean(PSI), Median=(PSI), Variance=var(PSI), SD=sd(PSI), .group = "keep")
View(total_summary)
total_summary =  summarize(Suspension_df, Mean=mean(PSI), Median=(PSI), Variance=var(PSI), SD=sd(PSI), .groups = 'keep')
View(total_summary)
View(Suspension_df)
total_summary =  summarize(Suspension_df[,2], Mean=mean(PSI), Median=(PSI), Variance=var(PSI), SD=sd(PSI), .groups = 'keep')
total_summary =  summarize(Suspension_df[,3], Mean=mean(PSI), Median=(PSI), Variance=var(PSI), SD=sd(PSI), .groups = 'keep')
total_summary =  summarize(Suspension_df[,3], Mean=mean(PSI), Median=(PSI), Variance=var(PSI), SD=sd(PSI), .groups = 'drop')
total_summary =  summarize(Suspension_df, Mean=mean(PSI), Median=(PSI), Variance=var(PSI), SD=sd(PSI), .groups = 'drop')
total_summary =  summarize(Suspension_df["PSI"], Mean=mean(PSI), Median=(PSI), Variance=var(PSI), SD=sd(PSI), .groups = 'drop')
total_summary <- summarize(Suspension_df["PSI"], Mean=mean(PSI), Median=(PSI), Variance=var(PSI), SD=sd(PSI), .groups = 'drop')
View(total_summary)
total_summary <- summarize(Suspension_df["PSI"], Mean=mean(PSI), Median=median(PSI), Variance=var(PSI), SD=sd(PSI), .groups = 'drop')
# Create Lot summary
lot_demo <- Suspension %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI),SD=sd(PSI))
# Create Lot summary
lot_summary <- Suspension %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI),SD=sd(PSI))
View(lot_summary)
# Perform t-test across all manufacturing lots
t.test(Suspension_df$PSI,mu = 1500)
# Perform t-test across all manufacturing lots
t.test(Suspension_df$PSI, mu = 1500)
t.test(subset(Suspension_df, Manufacturing_Lot=="Lot1")$PSI,  mu = 1500)
t.test(subset(Suspension_df, Manufacturing_Lot=="Lot2")$PSI,  mu = 1500)
t.test(subset(Suspension_df, Manufacturing_Lot=="Lot3")$PSI,  mu = 1500)
